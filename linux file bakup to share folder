#!/bin/bash
#
##################################################
#
# Global Variables
#
##################################################
HOST=$(hostname|cut -f1 -d.)
SCRIPT_NAME=`basename $0 .sh`
DATE=`date +%Y-%m-%d`

LOG_DIR=/var/log/${SCRIPT_NAME}
LOG_FILE=${LOG_DIR}/${SCRIPT_NAME}.log
##################################################
#
# Email Variables
#
##################################################
EMAILTO="amin.hemmati@allyouneedfresh.de"
#EMAILTO="caution@ayngmbh.de"
TEXTBODY="Diese email wurde nach einem Scriptablauf automatisch versendet. Von: $HOST"
SMTP_SERVER="smtp.allyouneed.local:25"
##################################################
#
# Specific Variables
#
#################################################

#REMOTESHARE="//10.23.96.29/BackupShare01/${HOST}"
REMOTESHARE="//10.23.96.230/Backupshare04/${HOST}"
CREDENTIALS_FILE="/root/.smbpasswd"
MOUNTPOINT="/mnt/synology_backup_folder"
BACKUP_PATH=${MOUNTPOINT}/${SCRIPT_NAME}

WIKIPATH="/var/www/dokuwiki"
DAILY_DATA_BACKUPS="8" # keep this amount data backups
##################################################

function write_log
{
        echo "" >> ${LOG_FILE}
        echo "`date +%F_%T` $*" >> ${LOG_FILE}
}
##################################################

function pause()
{
   read -p "$*"
}
##################################################

function err_handle
{
        ERR=$1
        COMMAND=$2
        if [ ${ERR} = 0 ]
        then
                write_log "Command ${COMMAND} completed"
        else
                write_log "Error: Command ${COMMAND} with Return Code=${ERR} finished"
                echo ${TEXTBODY} | smtp=${SMTP_SERVER} mailx -s "${SCRIPT_NAME} script on ${HOST} failed!" ${EMAILTO}
                exit 2
        fi
}
##################################################

function validation
{
        if [ ! -d ${BACKUP_PATH} ]
        then
#       mount -t cifs $REMOTESHARE $MOUNTPOINT -o credentials=${CREDENTIALS_FILE}
        mount -t cifs $REMOTESHARE $MOUNTPOINT -o username=backupservice,password=LL.zz1gsX03
        err_handle $? "Mount ${REMOTESHARE} failed."
        fi
}
##################################################
##################################################

function dokuwiki-backup
{
        write_log "Start Compress ${WIKIPATH}"
        tar --exclude=".*" -zcf "/tmp/data.1.tar.gz" -C "${WIKIPATH}" "data"
        err_handle $? " tar --exclude='.*' -zcf '/tmp/data.1.tar.gz' -C '${WIKIPATH}' 'data' "

        write_log "Finish backup ${WIKIPATH}"
}
##################################################

function check
{
checkDir()
{
                if [ ! -d "${BACKUP_PATH}/$1" ]
        then
                mkdir -p "${BACKUP_PATH}/$1"
                err_handle $? "Create dir ${BACKUP_PATH}/$1"
        fi
}
                write_log "Start Checking Dirs"
                checkDir "data"
                checkDir "data/archive"
                checkDir "data/daily"
}
##################################################

function rotate
{
rotateDir()
{
                # 1 -> path
                # 2 -> name
                # 3 -> number of backups
                
         for i in `seq $(($3 - 1)) -1 1`
        do
                if [ -f "$1/$2.$i.tar.gz" ]
                then
                        mv "$1/$2.$i.tar.gz" "$1/$2.$((i + 1)).tar.gz"
                fi
        done
}
                write_log "Start Rotating Dirs"
                rotateDir "${BACKUP_PATH}/data/daily" "data" "$DAILY_DATA_BACKUPS"
}
##################################################

function umount_share
{
        if [ ! -d ${BACKUP_PATH}/${DATE}_* ]
        then
                ls -la ${BACKUP_PATH} >> ${LOG_FILE}
                write_log "umount ${REMOTESHARE}"
                umount ${REMOTESHARE} > /dev/null 2>&1
                err_handle $? "umount ${REMOTESHARE}"
        fi
}
##################################################

function archiv
{
        if [ `date +%d` = "01" ]
        then
                write_log "Copy Backup-File from '/tmp/' to Archiv-Folder. "
                cp "/tmp/data.1.tar.gz" "${BACKUP_PATH}/data/archive/data-"`date +%m-%d-%Y`".tar.gz"
                err_handle $? "Copy to Archiv-Folder"
        fi
                write_log "Move Backup-File from '/tmp/' to Backup-Path. "
                mv "/tmp/data.1.tar.gz" "${BACKUP_PATH}/data/daily"
                err_handle $? "Move to Backup-Path"

}

write_log "------------- Start backup script -----------------------"
validation
dokuwiki-backup
check
rotate
archiv
umount_share
write_log "-------------- Finish backup script ----------------------"




                                                               
